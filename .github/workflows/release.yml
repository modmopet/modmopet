name: Release
on:
  push:
    branches:
    - main
    - rc
    - beta
    - nightly
    - hotfix
    - "*.x"

env:
  FLUTTER_VERSION: '3.10.x'

jobs:
  sem-version:
    name: SemVersion
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Sem-Version
      id: sem-version
      uses: shiipou/sem-version@beta
      with:
        ALLOW_FAILURE: false
        PRERELEASE_BRANCHES_REGEX: '^(rc|beta|nightly|hotfix)$'

    outputs:
      WILL_RELEASE: ${{ steps.sem-version.outputs.WILL_RELEASE }}
      IS_PRE_RELEASE: ${{ steps.sem-version.outputs.IS_PRE_RELEASE }}
      VERSION: ${{ steps.sem-version.outputs.VERSION }}
      CHANGELOG: ${{ steps.sem-version.outputs.CHANGELOG }}

  build:
    name: Build
    needs: [ sem-version ]
    strategy:
      matrix:
        target: [ windows, linux, macos]
        include:
          - target: windows
            runner: windows-latest
            artifact: dist/*/modmopet*.{zip,msix}
          - target: linux
            runner: ubuntu-latest
            artifact: dist/*/modmopet*.{zip,deb,AppImage}
          - target: macos
            runner: macos-latest
            artifact: dist/*/modmopet*.{zip,dmg}
    runs-on: ${{ matrix.runner }}
    if: ${{ needs.sem-version.outputs.WILL_RELEASE == 'true' }}
    environment: ${{ github.ref_name }}
    timeout-minutes: 10
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Install yq
      uses: shiipou/setup-yq-action@v2.2.0
      with:
        version: v4.34.1

    - name: Install Flutter
      uses: subosito/flutter-action@v2.10.0
      with:
        flutter-version: ${{ env.flutter_version }}
        cache: true
        cache-key: 'flutter-:os:-:channel:-:version:-:arch:-:hash:' # optional, change this to force refresh cache
        cache-path: "${{ runner.tool_cache }}/flutter/:channel:-:version:-:arch:" # optional, change this to specify the cache path
        architecture: x64 # optional, x64 or arm64

    - name: Install Dependencies (windows)
      if: ${{ matrix.runner == 'windows-latest' }}
      run: |
        flutter config --enable-windows-desktop
    - name: Install Dependencies (linux)
      if: ${{ matrix.runner == 'ubuntu-latest' }}
      run: |
        sudo apt-get update -y
        sudo apt-get install -y ninja-build libgtk-3-dev
        flutter config --enable-linux-desktop
    - name: Install Dependencies (macos)
      if: ${{ matrix.runner == 'macos-latest' }}
      run: |
        flutter config --enable-macos-desktop

    - name: Targets from artifacts
      uses: actions/github-script@v6
      id: targets-from-artifacts
      with:
        script: |
          // Get everything between the last {} in the artifact string
          const artifacts = "${{ matrix.artifact }}";
          const pattern = /\{([^}]+)\}/g;
          let match;
          let extensions;
          while (match = pattern.exec(artifacts)) {
            extensions = match[1];
          }
          return extensions.toLowerCase();
        result-encoding: string

    - name: Build Flutter ${{ matrix.target }}
      env:
        VERSION: ${{ needs.sem-version.outputs.VERSION }}
        GH_PRIVATE_KEY: ${{ secrets.GH_PRIVATE_KEY }}
        GH_APP_ID: ${{ secrets.GH_APP_ID }}
        GH_INSTALLMENT_ID: ${{ secrets.GH_INSTALLMENT_ID }}
        SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
        SENTRY_TRACE_SAMPLE_RATE: ${{ vars.SENTRY_TRACE_SAMPLE_RATE }}
      run: |
        yq eval -i '.version = "${{  needs.sem-version.outputs.VERSION}}"' pubspec.yaml
        dart pub global activate flutter_distributor
        make build ${{ matrix.target }} ${{ steps.targets-from-artifacts.outputs.result }}
        
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        path: ${{ matrix.artifact }}

  release:
    name: Release
    needs: [ build, sem-version ]
    runs-on: ubuntu-latest
    if: ${{ needs.sem-version.outputs.WILL_RELEASE == 'true' }}
    environment: ${{ github.ref_name }}
    permissions:
      contents: write
    timeout-minutes: 2
    steps:
    - name: download-artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/
    - name: Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      if: needs.sem-version.outputs.WILL_RELEASE == 'true'
      run: |
        changelog_file=$(mktemp)
        echo "${{ needs.sem-version.outputs.CHANGELOG }}" >> "$changelog_file"
        
        ARGS="--repo ${{ github.repository }} --target ${{ github.sha }} -F $changelog_file"
        if [[ "${{ needs.sem-version.outputs.IS_PRE_RELEASE }}" ==  "true" ]]; then
          ARGS="$ARGS --prerelease"
        fi
 
        gh release create $ARGS v${{ needs.sem-version.outputs.VERSION }} ./artifacts/*/*
